import groovy.json.JsonSlurper

plugins {
    id "net.minecraftforge.gradle.forge" version "2.1-SNAPSHOT"
    id "org.spongepowered.mixin" version "0.6-SNAPSHOT"
    id "java"
}

sourceCompatibility = targetCompatibility = 1.8
version = "2.2-alpha"
group = "org.frontear"
archivesBaseName = "Infinity"
def access_transformer = "infinity_at.cfg"
def mixin = "mixins.infinity.json"
def refmap = new JsonSlurper().parse(file("src/main/resources/$mixin")).refmap

sourceSets.main.ext.refMap = refmap

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
    makeObfSourceJar = false

    replaceIn "MinecraftMod.java"
    replacements.each { k, v -> replace "\${$k}": v }
}

def replacements = [
        "modid"    : archivesBaseName.toLowerCase(),
        "name"     : archivesBaseName,
        "version"  : project.version,
        "mcversion": project.minecraft.version
]

repositories {
    mavenCentral()
    maven {
        name = "sponge"
        url = "https://repo.spongepowered.org/maven"
    }
}

dependencies {
    compile("org.spongepowered:mixin:0.7.11-SNAPSHOT") {
        exclude module: "*"
        // we do this because minecraft provides the three libraries mixin requires (guava, gson, commons-io)
    }

    implementation("org.projectlombok:lombok:1.18.8")
}

processResources {
    def modinfo = "mcmod.info"

    inputs.properties replacements

    from(sourceSets.main.resources.srcDirs) {
        include modinfo
        expand replacements
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude modinfo
    }

    rename "($access_transformer)", "META-INF/\$1"
}

runClient {
    jvmArgs "-Xmx1G", "-Dmixin.hotSwap=true", "-Dfrontear.debug=true" // debugging property
    args "--tweakClass", "org.spongepowered.asm.launch.MixinTweaker", "--mixin", mixin
}

javadoc {
    options.tags = [
            "reason"
    ]
}

jar {
    manifest.attributes "TweakClass": "org.spongepowered.asm.launch.MixinTweaker", "MixinConfigs": mixin,
            "FMLAT": access_transformer, "ForceLoadAsMod": true

    exclude "dummyThing", "LICENSE.txt", "META-INF/INDEX.LIST", "META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA",
            "META-INF/DEPENDENCIES", "META-INF/NOTICE", "META-INF/LICENSE", "META-INF/*.txt"

    from project.configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    // not happy about this "fatjar" situation
}
